/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Vistas;

import Controlador.Gestor;
import Dto.ProductoExistencia;
import Modelo.CellRenderer;
import Modelo.HeaderCellRenderer;
import Modelo.Producto;
import static Vistas.Main.panelEscritorio;
import java.awt.Dimension;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JInternalFrame;
import javax.swing.JTable;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author Prophet
 */
public class ConsultarStock extends javax.swing.JInternalFrame {

    private ArrayList<ProductoExistencia> lStock;
    Gestor g;
    private TableRowSorter trsfiltro;
    String filtro;
    public ConsultarStock() {
        initComponents();
        g = new Gestor();
        cargarTabla();
        txtFiltro.addKeyListener(new KeyAdapter() {
            @Override
            public void keyReleased(final KeyEvent e) {
                String cadena = (txtFiltro.getText().toUpperCase());
                txtFiltro.setText(cadena);
                repaint();
                filtro();
            }
        });
        productosAlertaStock();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tablaProductos = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        txtFiltro = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();

        setClosable(true);

        tablaProductos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tablaProductos);

        jLabel1.setText("FILTRAR POR NOMBRE DE PRODUCTO:");

        txtFiltro.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtFiltroKeyTyped(evt);
            }
        });

        jLabel2.setText("listado de productos con existencia entre 1 y 3 sobre la cantidad de existencia minima, y productos con stock 0.");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane3.setViewportView(jTable1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 760, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtFiltro, javax.swing.GroupLayout.PREFERRED_SIZE, 269, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap(40, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtFiltro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(33, 33, 33)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(44, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtFiltroKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtFiltroKeyTyped
        // filtro por tipeo
        trsfiltro = new TableRowSorter(tablaProductos.getModel());
        tablaProductos.setRowSorter(trsfiltro);
    }//GEN-LAST:event_txtFiltroKeyTyped
    
    public void filtro() 
    {
        filtro = txtFiltro.getText();
        /*filtra por la descripcion, o sea en este caso la primera fila de la tabla*/
        trsfiltro.setRowFilter(RowFilter.regexFilter(txtFiltro.getText(), 0));
    }

    void CentrarVentana(JInternalFrame frame) {
        panelEscritorio.add(frame);
        Dimension dim = panelEscritorio.getSize();
        Dimension framesise = frame.getSize();
        frame.setLocation((dim.width - framesise.width) / 2, (dim.height - framesise.height) / 2);
        frame.show();
    }
    
    private void cargarTabla() {

        try {
            
            DefaultTableModel modelo = new DefaultTableModel();
            lStock = g.getListadoProductosEnExistencia();
            modelo.setColumnIdentifiers(new String[]{"Descripción producto","En existencia", "Existencia mínima", "Diferencia"});
            for (ProductoExistencia p : lStock ) {
                Vector v = new Vector();
                v.add(p.getDescripcion().toUpperCase());
                v.add(p.getActual());
                v.add(p.getMinimo());
                v.add(p.getDiferencia());
        
                modelo.addRow(v);
            }

            tablaProductos.setModel(modelo);
            //color de los bordes de las celdas
            tablaProductos.setGridColor(new java.awt.Color(214, 213, 208));
            //tamaño de columnas
            tablaProductos.getColumnModel().getColumn(0).setPreferredWidth(450);
            tablaProductos.getColumnModel().getColumn(1).setPreferredWidth(150);
            tablaProductos.getColumnModel().getColumn(2).setPreferredWidth(150);
            tablaProductos.getColumnModel().getColumn(3).setPreferredWidth(150);
         
           
            //altura de filas
            tablaProductos.setRowHeight(24);
            //se asigna el nuevo CellRenderer a cada columna segun su contenido
            tablaProductos.getColumnModel().getColumn(0).setCellRenderer(new CellRenderer("text"));
            tablaProductos.getColumnModel().getColumn(1).setCellRenderer(new CellRenderer("actual"));
            tablaProductos.getColumnModel().getColumn(2).setCellRenderer(new CellRenderer("minimo"));
            tablaProductos.getColumnModel().getColumn(3).setCellRenderer(new CellRenderer("diferencia"));
           
            //Se asigna nuevo header a la tabla
            JTableHeader jtableHeader = tablaProductos.getTableHeader();
            jtableHeader.setDefaultRenderer(new HeaderCellRenderer());
            tablaProductos.setTableHeader(jtableHeader);
            filasNoEditables(tablaProductos);
        } catch (Exception e) {

        }
    }
    
    
    private void productosAlertaStock()
    {
        try 
        {
                ArrayList<Producto> tabla = g.alertaStock();
                DefaultTableModel dtm = new DefaultTableModel();
                dtm.setColumnIdentifiers(new String[]{"Descripción del producto"});
                for (Producto p : tabla) {
                Vector v = new Vector();
                v.add(p.getDescripcion());
                dtm.addRow(v);
                }
                jTable1.setModel(dtm);
                filasNoEditables(jTable1);
        } catch (SQLException ex) {
            Logger.getLogger(ConsultarStock.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private void filasNoEditables(JTable tabla)
    {
         for (int c = 0; c < tabla.getColumnCount(); c++)
            {
                Class<?> col_class = tabla.getColumnClass(c);
                tabla.setDefaultEditor(col_class, null);        // remover editor
            }
    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable tablaProductos;
    private javax.swing.JTextField txtFiltro;
    // End of variables declaration//GEN-END:variables
}
