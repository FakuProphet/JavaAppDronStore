/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Vistas;

import Controlador.Gestor;
import Dto.CarritoDTO;
import Modelo.CellRenderer;
import Modelo.Cliente;
import Modelo.Dato;
import Modelo.FormaPago;
import Modelo.HeaderCellRenderer;
import Modelo.Operador;
import Modelo.Producto;
import Reporte.Reporte;
import java.awt.HeadlessException;
import java.awt.Point;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.sql.SQLException;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author Prophet
 */
public class NuevaVenta extends javax.swing.JInternalFrame {

    Cliente c;
    Gestor g;
    private ArrayList<Producto>lProductos;
    private ArrayList<FormaPago>lFormasDePago;
    private ArrayList<CarritoDTO> carrito;
    private FormaPago miFormaPago;
    private CarritoDTO pr;
    private Dato miDato;
    private TableRowSorter trsfiltro;
    String filtro;
    public NuevaVenta() {
        initComponents();
        c= new Cliente();
        g = new Gestor();
        carrito = new ArrayList<>();
        pr = new CarritoDTO();
        lFormasDePago = new ArrayList<>();
        miDato = new Dato();
        cargarTabla();
        cargarTablaDetalle(carrito);
        inicio();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnGenerarVenta = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        txtDniCliente = new javax.swing.JSpinner();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaProductos = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        tablaDetalle = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtFiltro = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        lblDocumento = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        lblNombreCompleto = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        lblMontoTotal = new javax.swing.JLabel();
        btnCancelar = new javax.swing.JButton();
        btnBuscar = new javax.swing.JButton();
        btnSalir = new javax.swing.JButton();
        cboFormaPago = new javax.swing.JComboBox<>();
        jLabel11 = new javax.swing.JLabel();

        setTitle("DRONE STORE -Nueva venta-");

        btnGenerarVenta.setText("Generar venta");
        btnGenerarVenta.setEnabled(false);
        btnGenerarVenta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGenerarVentaActionPerformed(evt);
            }
        });

        jLabel1.setText("Cargar cliente");

        jLabel2.setText(" Buscar y cargar producto");

        tablaProductos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tablaProductos);

        tablaDetalle.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tablaDetalle.setToolTipText("Para eliminar un elemento hacer doble click.");
        jScrollPane2.setViewportView(tablaDetalle);

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Resources/Cash Register_50px.png"))); // NOI18N
        jLabel3.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);

        jLabel4.setFont(new java.awt.Font("Consolas", 1, 24)); // NOI18N
        jLabel4.setText("NUEVA VENTA");

        txtFiltro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtFiltroActionPerformed(evt);
            }
        });
        txtFiltro.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtFiltroKeyTyped(evt);
            }
        });

        jLabel5.setText("Detalle de compra");

        jLabel6.setText("Nro Documento");

        lblDocumento.setForeground(new java.awt.Color(255, 0, 204));
        lblDocumento.setText("...");

        jLabel7.setText("Nombre completo:");

        lblNombreCompleto.setText("...");

        jPanel1.setBackground(new java.awt.Color(0, 153, 153));
        jPanel1.setForeground(new java.awt.Color(153, 255, 204));

        jLabel10.setFont(new java.awt.Font("Microsoft YaHei", 1, 36)); // NOI18N
        jLabel10.setText("Monto total");

        lblMontoTotal.setText("...");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(109, Short.MAX_VALUE)
                .addComponent(lblMontoTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(89, 89, 89))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(42, 42, 42)
                .addComponent(jLabel10)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(jLabel10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblMontoTotal)
                .addContainerGap(25, Short.MAX_VALUE))
        );

        btnCancelar.setText("Cancelar");
        btnCancelar.setEnabled(false);

        btnBuscar.setText("Buscar");
        btnBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarActionPerformed(evt);
            }
        });

        btnSalir.setText("Salir");
        btnSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalirActionPerformed(evt);
            }
        });

        cboFormaPago.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cboFormaPago.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboFormaPagoActionPerformed(evt);
            }
        });

        jLabel11.setText("Forma de pago");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jLabel7)))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(txtFiltro, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jLabel11)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(cboFormaPago, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(186, 186, 186)
                                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(txtDniCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(btnBuscar)))
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblNombreCompleto, javax.swing.GroupLayout.PREFERRED_SIZE, 307, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel6)
                                .addGap(28, 28, 28)
                                .addComponent(lblDocumento, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 639, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 639, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(28, 28, 28)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(btnCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(btnSalir, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btnGenerarVenta, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                        .addContainerGap(45, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addComponent(jLabel4)
                        .addGap(50, 50, 50))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtDniCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnBuscar))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(lblNombreCompleto)
                    .addComponent(jLabel6)
                    .addComponent(lblDocumento))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtFiltro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cboFormaPago, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11))
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 123, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(jLabel5)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnGenerarVenta)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnSalir)
                            .addComponent(btnCancelar)))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(40, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnGenerarVentaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGenerarVentaActionPerformed
        //Generar venta
        

           if (JOptionPane.showConfirmDialog(rootPane, "Se va a generar la transacción venta, ¿desea continuar?",
            "Comfirmación registrar venta", JOptionPane.WARNING_MESSAGE, JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION)
           {
               try {
                   Operador operador = new Operador();
                   operador.setId(1);
                   String mensaje = g.setVenta(c.getClienteDni(),miFormaPago.getId_formaPago(),operador.getId());
                   
                   for (CarritoDTO cto : carrito)
                   {
                       g.setVentaDetalle(cto.getCodigoProducto(),cto.getCantidad());
                   }
                   
                   
                   JOptionPane.showMessageDialog(this, mensaje,"Aviso",JOptionPane.INFORMATION_MESSAGE);
                   this.dispose();
                   miDato = g.getDatosUltimaVenta();
                   Reporte nuevo = new Reporte();
                   nuevo.getComprobanteVenta(miDato.getNroOrden(), miDato.getCliente());
               }
               
     
               catch (SQLException ex) {
                   Logger.getLogger(NuevaVenta.class.getName()).log(Level.SEVERE, null, ex);
               }
              
           }
        
        
    }//GEN-LAST:event_btnGenerarVentaActionPerformed

    private void txtFiltroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtFiltroActionPerformed
        // filtro productos
    }//GEN-LAST:event_txtFiltroActionPerformed

    
    private void inicio()
    {
        lFormasDePago = g.getListadoFormasDePago();
        cargarCombo(lFormasDePago, cboFormaPago);
        miFormaPago = (FormaPago)cboFormaPago.getSelectedItem();
        tablaProductos.addMouseListener(new MouseAdapter() {
        @Override
        public void mousePressed(MouseEvent Mouse_evt) {
        JTable table =(JTable) Mouse_evt.getSource();
        Point point = Mouse_evt.getPoint();
        int row = table.rowAtPoint(point);
        if (Mouse_evt.getClickCount() == 2) 
        {
              
           try 
           {   
                pr = new CarritoDTO();
                pr.setCodigoProducto(Integer.valueOf(tablaProductos.getValueAt(tablaProductos.getSelectedRow(), 0).toString()));
                pr.setDescripcionProducto(tablaProductos.getValueAt(tablaProductos.getSelectedRow(), 1).toString());
                pr.setCosto(Double.valueOf(tablaProductos.getValueAt(tablaProductos.getSelectedRow(), 2).toString()));
                pr.setCantidad(Integer.valueOf(JOptionPane.showInputDialog("INGRESE LA CANTIDAD...")));
                int stock = Integer.valueOf( tablaProductos.getValueAt(tablaProductos.getSelectedRow(), 3).toString());
                if(pr.getCantidad()<=stock)
                {
                    if(existeProductoTablaDetalle(pr.getCodigoProducto()))
                    {
                        carrito.add(pr);     
                        cargarTablaDetalle(carrito);
                        habilitarControles(true);
                    }
                    else
                    {
                        JOptionPane.showMessageDialog(null, "El producto ya se encuentra cargado", "Información", JOptionPane.INFORMATION_MESSAGE);
                    }
                }
                else
                {
                    JOptionPane.showMessageDialog(null, "La cantidad especificada excede la existencia real.", "Información", JOptionPane.INFORMATION_MESSAGE);
                }
                
           } 
           catch (HeadlessException | NumberFormatException e) 
           {
                JOptionPane.showMessageDialog(null, "Debe ingresar un valor numérico", "Información", JOptionPane.INFORMATION_MESSAGE);            
           }
            
        }
        
        
        }
        });
        
        
        
        tablaDetalle.addMouseListener(new MouseAdapter() {
        @Override
        public void mousePressed(MouseEvent Mouse_evt) {
        JTable table =(JTable) Mouse_evt.getSource();
        Point point = Mouse_evt.getPoint();
        int row = table.rowAtPoint(point);
        if (Mouse_evt.getClickCount() == 2) 
        {
              
           try 
           {   
                if(tablaDetalle.getRowCount()>0)
                {   
           
                    if (JOptionPane.showConfirmDialog(rootPane, "Va a eliminar la selección, ¿desea continuar?",
                    "Eliminar", JOptionPane.WARNING_MESSAGE, JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION)
                    {
                        removeSelectedRows(tablaDetalle);
                        TotalizarPedido();
                    }
            
                }
           } 
           catch (Exception e) 
           {
                JOptionPane.showMessageDialog(null, "Error: "+e, "Información", JOptionPane.INFORMATION_MESSAGE);            
           }
            
        }
        
        
        }
        });
        
        
        txtFiltro.addKeyListener(new KeyAdapter() {
            @Override
            public void keyReleased(final KeyEvent e) {
                String cadena = (txtFiltro.getText().toUpperCase());
                txtFiltro.setText(cadena);
                repaint();
                filtro();
            }
        });
        
    }
    
    
    public void filtro() 
    {
        filtro = txtFiltro.getText();
        /*filtro por columna descripcion de la tabla*/
        trsfiltro.setRowFilter(RowFilter.regexFilter(txtFiltro.getText(), 1));
    }
    
    private void habilitarControles(boolean x)
    {
        /*Despues de q hayan sido agregado elementos a la lista, o cuanod se hayan eliminado*/
        btnCancelar.setEnabled(x);
        btnSalir.setEnabled(!x);
      //  btnGenerarVenta.setEnabled(x);
    }
    
    
    private void cargarTablaDetalle(ArrayList<CarritoDTO> lista) {

            DefaultTableModel modelo = new DefaultTableModel();
            modelo.setColumnIdentifiers(new String[]{"Código","Descripción", "Cantidad","Precio"});
            
            for (CarritoDTO o : lista) 
            {
               Vector v = new Vector();
               v.add(o.getCodigoProducto());
               v.add(o.getDescripcionProducto());
               v.add(o.getCantidad());
               v.add(o.getCosto());
               
               modelo.addRow(v);
            }
            
            tablaDetalle.setModel(modelo);
            
            TotalizarPedido();
            tablaDetalle.setGridColor(new java.awt.Color(214, 213, 208));
            //tamaño de columnas
            tablaDetalle.getColumnModel().getColumn(0).setPreferredWidth(50);
            tablaDetalle.getColumnModel().getColumn(1).setPreferredWidth(200);
            tablaDetalle.getColumnModel().getColumn(2).setPreferredWidth(60);
            tablaDetalle.getColumnModel().getColumn(3).setPreferredWidth(60);
            //altura de filas
            tablaDetalle.setRowHeight(24);
            //se asigna el nuevo CellRenderer a cada columna segun su contenido
            tablaDetalle.getColumnModel().getColumn(1).setCellRenderer(new CellRenderer("text"));
            tablaDetalle.getColumnModel().getColumn(3).setCellRenderer(new CellRenderer("minimo"));
            tablaDetalle.getColumnModel().getColumn(2).setCellRenderer(new CellRenderer("num"));
            tablaDetalle.getColumnModel().getColumn(0).setCellRenderer(new CellRenderer("num"));
            //Se asigna nuevo header a la tabla
            JTableHeader jtableHeader = tablaDetalle.getTableHeader();
            jtableHeader.setDefaultRenderer(new HeaderCellRenderer());
            tablaDetalle.setTableHeader(jtableHeader);
            filasNoEditables(tablaDetalle);
           // filasNoEditables(tablaDetallePresupuesto);
           
    }
    
    
    
    private boolean existeProductoTablaDetalle(int codigoProducto)
    {
        boolean bandera = true;
        if(tablaDetalle.getRowCount()>0)
        {
            for (int i = 0; i < tablaDetalle.getRowCount(); i++) 
            {
                //el cero indica la columna la cual se evalua
                //en este caso es el codigo del producto
                if(tablaDetalle.getValueAt(i, 0)!=null)
                {
                    int codigo =  Integer.valueOf(tablaDetalle.getValueAt(i, 0).toString());
                    if(codigo==codigoProducto)
                    {
                        bandera = false;
                    }
                }
            }
        }
        
        return bandera;
    }
    
    
    
    private void TotalizarPedido()
    {
        double SubTotal = 0.0;
        double IvaDiscriminado=0.0;
        double total =0.0;
        int cantidad = 0;
        double costo=0;
        int iva = 21;
        if(tablaDetalle.getRowCount()>=0)
        {
            //columna dos cantidad, columna tres precio unitario
            for (int i = 0; i < tablaDetalle.getRowCount(); i++) {
            cantidad = Integer.valueOf(tablaDetalle.getValueAt(i, 2).toString());
            costo = Double.valueOf(tablaDetalle.getValueAt(i, 3).toString());
            SubTotal+=cantidad*costo;
            IvaDiscriminado = (SubTotal * iva ) /100;
            total = SubTotal + IvaDiscriminado;
            }
            DecimalFormat f = new DecimalFormat("###,###.##");
          //  lblSubTotal.setText("$"+String.valueOf(f.format(SubTotal)));
           // lblIva.setText("$"+String.valueOf(f.format(IvaDiscriminado)));
            lblMontoTotal.setText("$"+String.valueOf(f.format(total)));
        }
        else
        {
            //Sin Acciones
        }
        
       
    }
    
    
    
    private void cargarCombo(ArrayList lista, JComboBox combo)
    {
        DefaultComboBoxModel modelo = new DefaultComboBoxModel();
        
        for (Object o : lista) 
        {
            FormaPago p = (FormaPago)o;
            if(p.getId_formaPago()<6)
            modelo.addElement(o);
        }
        
        combo.setModel(modelo);
    }
    
    
    
    public void removeSelectedRows(JTable table)
    {
        DefaultTableModel model = (DefaultTableModel) table.getModel();
        int[] rows = table.getSelectedRows();
        
            for(int i=0;i<rows.length;i++)
            {
                model.removeRow(rows[i]-i);    
                carrito.remove(rows[i]);
            }   
    }
    
    
    void cargarTabla()
    {
            lProductos = new ArrayList<>();
            DefaultTableModel modelo = new DefaultTableModel();
            lProductos = g.getListadoProductosSimple();
            modelo.setColumnIdentifiers(new String[]{"Cod producto","Descripción producto","Precio unitario","Stock"});
            for (Producto p : lProductos ) {
                if(p.getPrecioUnitario()>0)
                {
                    Vector v = new Vector();
                    v.add(p.getCodigo());
                    v.add(p.getDescripcion().toUpperCase());
                    v.add(p.getPrecioUnitario());
                    v.add(p.getStock());
                    modelo.addRow(v);
                }
            }
            tablaProductos.setModel(modelo);
            tablaProductos.setGridColor(new java.awt.Color(214, 213, 208));
            //tamaño de columnas
            tablaProductos.getColumnModel().getColumn(0).setPreferredWidth(50);
            tablaProductos.getColumnModel().getColumn(1).setPreferredWidth(200);
            tablaProductos.getColumnModel().getColumn(2).setPreferredWidth(60);
            tablaProductos.getColumnModel().getColumn(3).setPreferredWidth(60);
           
           
            //altura de filas
            tablaProductos.setRowHeight(24);
            //se asigna el nuevo CellRenderer a cada columna segun su contenido
            tablaProductos.getColumnModel().getColumn(1).setCellRenderer(new CellRenderer("text"));
            tablaProductos.getColumnModel().getColumn(3).setCellRenderer(new CellRenderer("minimo"));
             tablaProductos.getColumnModel().getColumn(2).setCellRenderer(new CellRenderer("num"));
            tablaProductos.getColumnModel().getColumn(0).setCellRenderer(new CellRenderer("num"));
            //Se asigna nuevo header a la tabla
            JTableHeader jtableHeader = tablaProductos.getTableHeader();
            jtableHeader.setDefaultRenderer(new HeaderCellRenderer());
            tablaProductos.setTableHeader(jtableHeader);
            filasNoEditables(tablaProductos);
           // filasNoEditables(tablaDetallePresupuesto);
    }
    
    
    private void filasNoEditables(JTable tabla)
    {
         for (int c = 0; c < tabla.getColumnCount(); c++)
            {
                Class<?> col_class = tabla.getColumnClass(c);
                tabla.setDefaultEditor(col_class, null);        // remover editor
            }
    }
    
    
    
    
    private void btnBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarActionPerformed
        // busqueda y filtro de cliente
        
         int dni=Integer.parseInt(txtDniCliente.getValue().toString());
           
            try
            { 
                c = g.obtenerCliente(dni);
                
                if(c == null)
                {
                    JOptionPane.showMessageDialog(null, "El cliente dni nro: " +dni+ " no se encuentra en nuestros registros");
                    limpiarCampos();
                    btnGenerarVenta.setEnabled(false);
                }
                else
                {
                    lblNombreCompleto.setText(c.getApellido().toUpperCase()+" "+c.getNombre());
                    lblDocumento.setText(String.valueOf(c.getClienteDni()));
                    btnGenerarVenta.setEnabled(true);
                }
            }
            catch(Exception e)
            {
                
            }
    }//GEN-LAST:event_btnBuscarActionPerformed

    private void btnSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalirActionPerformed
        // Abandonar pantalla
        
        if (JOptionPane.showConfirmDialog(rootPane, "Va a salir de la venta de productos, ¿desea continuar?",
        "Abandonar", JOptionPane.WARNING_MESSAGE, JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION)
        {
            this.dispose();
        }
    }//GEN-LAST:event_btnSalirActionPerformed

    private void cboFormaPagoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboFormaPagoActionPerformed
        miFormaPago = new FormaPago();
        miFormaPago = (FormaPago) cboFormaPago.getSelectedItem();
    }//GEN-LAST:event_cboFormaPagoActionPerformed

    private void txtFiltroKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtFiltroKeyTyped
        trsfiltro = new TableRowSorter(tablaProductos.getModel());
        tablaProductos.setRowSorter(trsfiltro);
    }//GEN-LAST:event_txtFiltroKeyTyped

    
     void limpiarCampos()
    {
        lblDocumento.setText("...");
        lblNombreCompleto.setText("...");
    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBuscar;
    private javax.swing.JButton btnCancelar;
    private javax.swing.JButton btnGenerarVenta;
    private javax.swing.JButton btnSalir;
    private javax.swing.JComboBox<String> cboFormaPago;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblDocumento;
    private javax.swing.JLabel lblMontoTotal;
    private javax.swing.JLabel lblNombreCompleto;
    private javax.swing.JTable tablaDetalle;
    private javax.swing.JTable tablaProductos;
    private javax.swing.JSpinner txtDniCliente;
    private javax.swing.JTextField txtFiltro;
    // End of variables declaration//GEN-END:variables
}
